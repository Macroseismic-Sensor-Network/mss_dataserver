#!/usr/bin/env python3
# -*- coding: utf-8 -*-
##############################################################################
# LICENSE
#
# This file is part of mss_dataserver.
# 
# If you use mss_dataserver in any program or publication, please inform and
# acknowledge its authors.
# 
# mss_dataserver is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# mss_dataserver is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with mss_dataserver. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2019 Stefan Mertl
##############################################################################

import logging
import os
import sys

import click


import mss_dataserver.core.project
import mss_dataserver.core.util as util
import mss_dataserver.postprocess.map_plotter as map_plotter
import mss_dataserver.postprocess.seismogram_plotter as seis_plotter
import mss_dataserver.postprocess.postprocess_event as pp_event


@click.group()
@click.argument('config_file')
@click.pass_context
def cli(ctx, config_file):
    # Load the config file.
    if not os.path.exists(config_file):
        print('ERROR: Configuration file not found: %s.', config_file)
        raise click.Abort()
    config = util.load_configuration(config_file)

    # Create the logging instance.
    logger_name = 'mss_dataserver'
    logger = logging.getLogger(logger_name)
    logger.setLevel(config['log']['loglevel'])
    log_dir = config['log']['log_dir']
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_filepath = os.path.join(log_dir, 'mssds_postprocess.log')
    handler = util.get_logger_rotating_file_handler(filename = log_filepath,
                                                    log_level = config['log']['loglevel'],
                                                    max_bytes = config['log']['max_bytes'],
                                                    backup_count = config['log']['backup_count'])
    logger.addHandler(handler)

    #logging.basicConfig(level = config['log']['loglevel'],
    #                    format = "LOG - %(asctime)s - %(process)d - %(levelname)s - %(name)s: %(message)s")
    logger.info("Creating the project.")
    project = mss_dataserver.core.project.Project(**config)

    ctx.obj['project'] = project
    ctx.obj['config'] = config

@cli.command()
@click.pass_context
@click.option('--public-id', help = 'The public ID of the event to process.')
@click.option('--no-db', is_flag = True, help = 'No database available.')
@click.option('--no-localize', is_flag = True, help = "Don't run the event localization.")
@click.option('--no-classify', is_flag = True, help = "Don't run the event classification.")
@click.option('--no-meta', is_flag = True, help = "Don't compute the meta supplement.")
@click.option('--no-specific', is_flag = True, help = "Don't compute the event type specific supplement.")
@click.option('--no-isoseismal', is_flag = True, help = "Don't compute the pgv kriging.")
@click.option('--no-pgv-sequence', is_flag = True, help = "Don't compute the PGV sequence.")
@click.option('--no-detection-sequence', is_flag = True, help = "Don't compute the detection sequence.")
@click.option('--no-pgv-contour-sequence', is_flag = True, help = "Don't compute the pgv contour sequence.")
def process_event(ctx, public_id, no_db, no_meta, no_specific,
                  no_localize, no_classify,
                  no_isoseismal, no_pgv_sequence, no_detection_sequence,
                  no_pgv_contour_sequence):
    ''' Process an event. '''

    logger_name = 'mss_dataserver'
    logger = logging.getLogger(logger_name)
    logger.info('Processing the event with public_id {public_id}.'.format(public_id = public_id))

    project = ctx.obj['project']
    if not no_db:
        try:
            project.connect_to_db()
        except Exception:
            logger.exception('Error connecting to the database.')
            sys.exit(-1)

        try:
            project.load_inventory()
        except Exception:
            logger.exception('Error loading the inventory from the database.')
            sys.exit(-1)
    else:
        try:
            project.load_inventory_from_xml()
        except Exception:
            logger.exception('Error loading the inventory from the XML file.')
            sys.exit(-1)

    # Split the inventory into MSS and third-party stations.
    # The postprocessing results should ignore the third party
    # stations by default.
    project.split_inventory()
        
    # Create the PostProcessor.
    try:
        pp = pp_event.EventPostProcessor(project = project)
        pp.set_event(public_id = public_id)
    except Exception:
        logger.exception('Error initializing the EventPostProcessor.')
        sys.exit(-1)

    # Classify the event.
    if not no_classify:
        try:
            logger.info('Running the event classification.')
            pp.classify_event()
        except Exception:
            logger.exception('Error classifying the event.')

    # Localize the event.
    if not no_localize:
        try:
            logger.info('Running the event localization.')
            pp.localize_event()
        except Exception:
            logger.exception('Error localizing the event.')

    # Compute the metadata supplement.
    if not no_meta:
        try:
            logger.info('Computing the meta supplement.')
            pp.compute_event_metadata_supplement()
        except Exception:
            logger.exception('Error computing the meta supplement.')

    # Compute event specific supplement.
    if not no_specific:
        try:
            logger.info('Computing the event type specific supplement.')
            pp.compute_event_specific_supplement()
        except Exception:
            logger.exception('Error computing the event type specific supplement.')
        

    # Compute the isoseismal contours.
    if not no_isoseismal:
        try:
            logger.info('Computing the isoseismal supplement.')
            pp.compute_isoseismal_supplement()
        except Exception:
            logger.exception('Error computing the isoseismal supplement.')

    # Compute the pgv sequence supplement.
    if not no_pgv_sequence:
        try:
            logger.info('Computing the pgv sequence supplement.')
            pp.compute_pgv_sequence_supplement()
        except Exception:
            logger.exception('Error computing the pgv sequence supplement.')

    # Compute the detection sequence supplement.
    if not no_detection_sequence:
        try:
            logger.info('Computing the detection sequence supplement.')
            pp.compute_detection_sequence_supplement()
        except Exception:
            logger.exception('Error computing the detection sequence supplement.')

    # Compute the pgv contour sequence.
    if not no_pgv_contour_sequence:
        try:
            logger.info('Computing the pgv contour sequence supplement.')
            pp.compute_pgv_contour_sequence_supplement()
        except Exception:
            logger.exception('Error computing the pgv contour sequence supplement.')

            
@cli.command()
@click.pass_context
@click.option('--public-id', help = 'The public ID of the event to process.')
@click.option('--no-db', is_flag = True, help = 'No database available.')
@click.option('--pgv-map/--no-pgv-map', default = True, help = 'Enable/disable computation of the pgv map [enabled].')
@click.option('--detection-sequence/--no-detection-sequence', default = True, help = 'Enable/disable computation of the detection sequence movie.')
@click.option('--pgv-contour-sequence/--no-pgv-contour-sequence', default = True, help = 'Enable/disable computation of the pgv contour sequence movie.')
@click.option('--pgv-contour-map/--no-pgv-contour-map', default = True, help = 'Enable/disable computation of the pgv contour map.')
@click.option('--voronoi-cell-sequence/--no-voronoi-cell-sequence', default = True, help = 'Enable/disable computation of the pgv contour map.')
def create_maps(ctx, public_id, no_db,
                pgv_map, detection_sequence,
                pgv_contour_sequence, pgv_contour_map,
                voronoi_cell_sequence):
    ''' Process an event. '''

    logger_name = 'mss_dataserver'
    logger = logging.getLogger(logger_name)
    logger.info('Creating the map images.')
    logger.info('Processing the event with public_id {public_id}.'.format(public_id = public_id))

    project = ctx.obj['project']

    # Create the plotter.
    supplement_dir = project.config['output']['event_dir']
    map_dir = project.config['postprocess']['map_dir']
    output_dir = project.config['postprocess']['visualization_dir']
    boundary = project.config['postprocess']['boundary_filename']
    basemap = project.config['postprocess']['basemap_filename']
    plotter = map_plotter.MapPlotter(supplement_dir = supplement_dir,
                                     map_dir = map_dir,
                                     output_dir = output_dir,
                                     boundary = boundary,
                                     basemap = basemap)
    plotter.set_event(public_id = public_id)

    # Create the pgv map.
    if pgv_map:
        try:
            plotter.create_event_pgv_map()
        except Exception:
            logger.exception("Error creating the PGV map.")

    # Create the pgv contour map of the event.
    if pgv_contour_map:
        try:
            plotter.create_pgv_contour_map()
        except Exception:
            logger.exception("Error creating the PGV contour map.")

    # Create the detection sequence images and movie.
    if detection_sequence:
        try:
            plotter.create_detection_sequence_movie()
        except Exception:
            logger.exception("Error creating the detection sequence.")

    # Create the pgv contour sequence images and movie.
    if pgv_contour_sequence:
        try:
            plotter.create_pgv_contour_sequence_movie()
        except Exception:
            logger.exception("Error creating the PGV contour sequence.")

    # Create the voronoi cell sequence images and movie.
    if voronoi_cell_sequence:
        try:
            plotter.create_voronoi_cell_sequence_movie()
        except Exception:
            logger.exception("Error creating the voronoi cell sequence.")



@cli.command()
@click.pass_context
@click.option('--public-id', help = 'The public ID of the event to process.')
@click.option('--no-db', is_flag = True, help = 'No database available.')
@click.option('--hypocenter', help = 'The hypocenter of the event (lon,lat,depth).')
def create_seismogram(ctx, public_id, no_db, hypocenter):
    ''' Process an event. '''

    logger_name = 'mss_dataserver'
    logger = logging.getLogger(logger_name)
    logger.info('Creating the seismogram images.')
    logger.info('Processing the event with public_id {public_id}.'.format(public_id = public_id))

    project = ctx.obj['project']

    # Create the plotter.
    supplement_dir = project.config['output']['event_dir']
    output_dir = project.config['postprocess']['visualization_dir']
    plotter = seis_plotter.SeismogramPlotter(supplement_dir = supplement_dir,
                                             output_dir = output_dir)

    if hypocenter:
        hypocenter = hypocenter.strip().split(',')
        hypocenter = [float(x.strip()) for x in hypocenter]

    plotter.set_event(public_id = public_id,
                      hypocenter = hypocenter)
    plotter.plot_seismogram()


if __name__ == '__main__':
    cli(obj = {})
